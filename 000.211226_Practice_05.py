# -*- coding: utf-8 -*-
"""
Created on Sun Dec 26 16:21:05 2021

@author: nnk
"""

# =============================================================================
# Numpy 자료구조
# 1. 리스트 (기본) [1],2]
# 2. 튜플 (상수, 불변) (1,2)
# 3. 딕셔너리 {key: value}
# 4. 세트 (집합) set()                : 하나의 데이터
# 5. 배열 (array)                     : 차원 팽창/축소 가능
# 6. Pandas (Series, DataFrame)
# =============================================================================

# 1. 배열 - 하나의 데이터 타입만 가능
import numpy as np
np.array([1,2,3])                                   # 1차원 배열
# array([1, 2, 3])
np.array([[1,2,3],[4,5,6],[7,8,9]])                 # 2차원 배열
# array([[1, 2, 3],
#        [4, 5, 6],
#        [7, 8, 9]])
np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])  # 3차원 배열
# array([[[ 1,  2,  3],
#         [ 4,  5,  6]],

#        [[ 7,  8,  9],
#         [10, 11, 12]]])

np.arange(1,26)                 # 인자 : 25개
# array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
#        18, 19, 20, 21, 22, 23, 24, 25])
np.arange(1,26).reshape(5,5)    # 인자 25개를 5x5열로 재배열
# array([[ 1,  2,  3,  4,  5],
#        [ 6,  7,  8,  9, 10],
#        [11, 12, 13, 14, 15],
#        [16, 17, 18, 19, 20],
#        [21, 22, 23, 24, 25]])
np.arange(1,26).reshape(5,-1)   # -1(reverse index) 알아서 계산해 줌
# array([[ 1,  2,  3,  4,  5],
#        [ 6,  7,  8,  9, 10],
#        [11, 12, 13, 14, 15],
#        [16, 17, 18, 19, 20],
#        [21, 22, 23, 24, 25]])
a1 = np.arange(1,26)
type(a1)
# numpy.ndarray


# =============================================================================
# 2. 색인
a2 = np.array([[1,2,3],[4,5,6],[7,8,9]])    # 2차원
# array([[1, 2, 3],
#        [4, 5, 6],
#        [7, 8, 9]])

a2[1,:]                                     # 1차원
# array([4, 5, 6])
a2[:,1]                                     # 1차원
# array([2, 5, 8])
a2[:,1:2]                                   # 2차원
# array([[2],
#        [5],
#        [8]])

# 1, 3행 선택하기
# a2[:,0,3]
# IndexError: too many indices for array: array is 2-dimensional, but 3 were indexed
a2[0:3:2,:]                     # start:end:interval
# array([[1, 2, 3],
#        [7, 8, 9]])                        # 2차원
a2[[0,2],:]                     # [행선택],:
# array([[1, 2, 3],
#        [7, 8, 9]])                        # 2차원

# 1,3열 선택하기
a2[:,[0,2]]                     # :,[열선택]
# array([[1, 3],
#        [4, 6],
#        [7, 9]])                           # 2차원

a2[1,1]
# 5
# a2[[1:3],[1:3]]
# SyntaxError: invalid syntax
a2[[1,2],[1,2]]                 # 2,3행 x2,3열을 가져오고 싶은데...
# array([5, 9])                 # a2[1,1], a2[2,2]의 값을 가져왔다...

# Numpy의 색인함수 (ix_())
a2[np.ix_([1,2],[1,2])]         # index값을 슬라이스 !
# array([[5, 6],
#        [8, 9]])

ixgrid = np.ix_([0,1],[2,4])        # np.ix_의 형태
# (array([[0],
#         [1]]),
#  array([[2, 4]]))
ixgrid[0].shape, ixgrid[1].shape    # np.ix_의 모양 : 0값->2행1열/1값->1행2열
# ((2, 1), (1, 2))

n = np.arange(10).reshape(2,5)
# array([[0, 1, 2, 3, 4],
#        [5, 6, 7, 8, 9]])
n[ixgrid]                       # n을 ixgrid배열로 빼주기
# array([[2, 4],
#        [7, 9]])

# 조건 색인
a2
# array([[1, 2, 3],
#        [4, 5, 6],
#        [7, 8, 9]])
a2>5
# array([[False, False, False],
#        [False, False,  True],
#        [ True,  True,  True]])
a2[a2>5]                        # 배열은 조건 해당되는 것 출력 가능
# array([6, 7, 8, 9])
a2[:,0]>5
# array([False, False,  True])  # 1열 5이상이면 True - 1차원
a3 = a2[a2[:,0]>5]
# array([[7, 8, 9]])            # 2차원 : 조건의 결과를 색인값으로 전달
a3.ndim # 2



# =============================================================================
# 3. 메서드
a4 = (['1','2','3'])
type(a4) # list
a2.shape() # x
# TypeError: 'tuple' object is not callable
dir(a2)                         # 사용가능한 메서드 리스트

a2.dtype  # dtype('int32')      # array 데이터 타입
a2.shape  # (3, 3)              # array 모양
a2.shape[0] # 3                 # Numpy 행의 수
a2.shape[1] # 3                 # Numpy 열의 수
a2.reshape(1,9)                 # array 모양 변경
# array([[1, 2, 3, 4, 5, 6, 7, 8, 9]])
a2.ndim # 2                     # array 차원



# =============================================================================
# 4. 연산
# list 는 서로의 원소끼리 연산 불가 -> 리스트 확장

# array 서로 사이즈가 같으면 연상 가능
np.array([1,2,3])+np.array([4,5,6])
# array([5, 7, 9])
np.array([1,2,3])+np.array([4,5,6,7]) # x
# ValueError: operands could not be broadcast together with shapes (3,) (4,)




# =============================================================================
# 5. 형 변환 메서드 (데이터타입 변환)
# =============================================================================
a2.astype('float')                  # astype 인자 타입을 바꿔줌
# array([[1., 2., 3.],
#        [4., 5., 6.],
#        [7., 8., 9.]])
a2.astype('int')
# array([[1, 2, 3],
#        [4, 5, 6],
#        [7, 8, 9]])
a2.astype('str')
# array([['1', '2', '3'],
#        ['4', '5', '6'],
#        ['7', '8', '9']], dtype='<U11')



# =============================================================================
# 6. np.where 함수
# if문의 축약 (SQL 문)               # SQL 기본형태 : select * from db where
# np.where(조건, 참 값, 거짓 값)
# =============================================================================
np.where(a2>5, 'A', 'B')
# array([['B', 'B', 'B'],
#        ['B', 'B', 'A'],
#        ['A', 'A', 'A']], dtype='<U1')

# =============================================================================
# 7. 산술 연산 메서드
## a2.describe() : pandas 메서드
# =============================================================================
a2.sum()            # 합            45
a2.mean()           # 평균          5.0
a2.var()            # 분산          6.666666666666667
a2.std()            # 표준편차      2.581988897471611
a2.min()            # 최소값        1
a2.max()            # 최대값        9 

(a2 > 5).sum()      # 4             a2에서 5보다 큰 값의 개수
(a2 > 5).any()      # True          a2에서 5보다 큰 값이 하나라도 있을 경우 True
(a2 > 5).all()      # True          a2에서 모두 5보다 큰 경우 True

# =============================================================================
# axis 축
# [축 번호]
# 2차원 : 행(0) 열(1)
# 3차원 : 층(0) 행(1) 열(2) **
# =============================================================================
a2.sum()            # 45            전체 인자의 합
a2.sum(axis=0)      # axis=0 '행' - 서로다른 행끼리 더하기
# array([12, 15, 18])
a2.sum(axis=1)      # axis=1 '열' - 서로다른 열끼리 더하기
# array([ 6, 15, 24])



# =============================================================================
# 8. 전치 메서드 (행과 열을 바꿈)
# =============================================================================
# 1) T (행-열 전치)
t1 = np.arange(1,9).reshape(4,2)
# array([[1, 2],
#        [3, 4],
#        [5, 6],
#        [7, 8]])
t1.T
# array([[1, 3, 5, 7],
#        [2, 4, 6, 8]])

# 2) swapaxes (축 전치, 순서상관없음)
t1.swapaxes(0,1)
# array([[1, 3, 5, 7],
#        [2, 4, 6, 8]])
t1.swapaxes(1,0)
# array([[1, 3, 5, 7],
#        [2, 4, 6, 8]])

# 3) transpose (축 전치, 축 번호 저장, 순서중요)
t1.transpose(0,1)
# array([[1, 2],
#        [3, 4],
#        [5, 6],
#        [7, 8]])
t1.transpose(1,0)
# array([[1, 3, 5, 7],
#        [2, 4, 6, 8]])



# =============================================================================
# 외부 파일 입출력
# =============================================================================
# 1) 파일 불러오기
# np.loadtxt(frame,        # 파일명
#             dtype,       # 데이터 타입
#             delimiter,   # 필드 구분 기호
#             skiprows,    # skip할 행의 수
#             usecols,     # 선택한 컬럼 값(위치)
#             encoding)    # 인코딩 옵션
# =============================================================================
import numpy as np

np.loadtxt('./data/file1.txt', delimiter=',',dtype='str')
# array([['a', 'b', 'c', 'd'],
#        ['1', '2', '3', '4'],
#        ['5', '6', '7', '8'],
#        ['9', '10', '11', '12'],
#        ['.', '13', '14', '15'],
#        ['16', '17', '18', '19'],
#        ['NA', '20', '21', '22']], dtype='<U2')

# =============================================================================
# 2) 파일 내려쓰기
# np.savetxt(frame,       # 파일명
#            X,           # 객체명
#            delimiter,   # 구분자
#            fmt,         # 출력형식 (format)
#            header,      # 헤더 출력 여부 (file 첫 문자열)
#            encoding)    # 인코딩 옵션
# =============================================================================
x = np.arange(0.0,5.0,1.0)              # 객체 설정
np.savetxt('./data/text1.txt',x,delimiter=',',fmt='%s')
# text1.txt 파일에 x라는 객체를 ','로 구분하여 'str'으로 써서 저장 !

# =============================================================================
# [참고 : fmt 전달/변경 방식]
# %s : 문자열
# %f : 실수(float)
# %d : 정수
# =============================================================================
'%s' % 123      # '123' str
'%f' % 123      # '123.000000' float
'%.2f' % 123    # '123.00' 소수점 자리수 지정
'%d' % 123      # '123' int
'%7d' % 123     # '    123' int
